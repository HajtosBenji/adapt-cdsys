// --------------------------------------------------
// contentObject
// --------------------------------------------------

// "_htmlClasses"
// Hide nav back button
// --------------------------------------------------
.hide-nav-back-btn .nav__back-btn {
  .u-display-none;
}

// "_classes"
// Hide the page header
// --------------------------------------------------
.hide-page-header .page__header {
  .u-display-none;
}

// Header color mixin
// Add to menu/page to enable
// e.g. 'header-color transparent-dark'
// Note: both arguments must be predefined variables
// --------------------------------------------------
.header-color-mixin(background, background-inverted);
.header-color-mixin(transparent-light, font-color);
.header-color-mixin(transparent-dark, font-color-inverted);

.header-color-mixin(@color, @color-inverted) {

.header-color.@{color} {
  .menu,
  .page {
    &__header {
      background-color: @@color;
    }
  }
  .menu,
  .page {
    &__title,
    &__subtitle,
    &__body,
    &__body a,
    &__instruction,
    &__instruction a {
     color: @@color-inverted;
    }
  }
}

}

// --------------------------------------------------
// Block
// --------------------------------------------------

// Custom class added to block
// Aligns child components centrally on the vertical axis
// --------------------------------------------------
.block.align-vert-center .component__container {
  align-items: center;
}

// Aligns child components to the bottom of the parent block on the vertical axis
// --------------------------------------------------
.block.align-vert-bottom .component__container {
  align-items: flex-end;
}

// Reverses the visual layout of the components above the medium breakpoint
// e.g. Left layout components would still render first in the DOM order
// but visually appear on the right hand side above the medium breakpoint. The
// components woud vertically stack as per the DOM order below the breakpoint
// --------------------------------------------------
.block.reverse-desktop-order .component {
  @media (min-width: @device-width-medium) {
    &__container {
      flex-direction: row-reverse;
    }

    &.is-left {
      padding-right: inherit;
      padding-left: @component-padding-hoz;

      .dir-rtl & {
        padding-left: inherit;
        padding-right: @component-padding-hoz;
      }
    }

    &.is-right {
      padding-left: inherit;
      padding-right: @component-padding-hoz;

      .dir-rtl & {
        padding-right: inherit;
        padding-left: @component-padding-hoz;
      }
    }
  }
}

// Extend width of block to 70rem (1120px)
// --------------------------------------------------
.block.extend-content-container .block__inner {
  max-width: 70rem;
}

// Extend width of block to max page width
// --------------------------------------------------
.block.extend-container .block__inner {
  max-width: @max-width;
}

// Remove top padding from block
// --------------------------------------------------
.block.remove-padding-top .block__inner,
.block.remove-top-padding .block__inner {
  padding-top: 0;
}

// Remove bottom padding from block
// --------------------------------------------------
.block.remove-padding-bottom .block__inner,
.block.remove-bottom-padding .block__inner {
  padding-bottom: 0;
}

// Reduce the blocks top padding by half
// --------------------------------------------------
.block.reduce-padding-top .block__inner {
  padding-top: @block-padding-ver / 2;
}

// Reduce the blocks bottom padding by half
// --------------------------------------------------
.block.reduce-padding-bottom .block__inner {
  padding-bottom: @block-padding-ver / 2;
}

// Double the blocks top padding
// --------------------------------------------------
.block.increase-padding-top .block__inner {
  padding-top: @block-padding-ver * 2;
}

// Double the blocks bottom padding
// --------------------------------------------------
.block.increase-padding-bottom .block__inner {
  padding-bottom: @block-padding-ver * 2;
}

// DEPRECATED in favour of bg-color-mixin
// Block background color mixin
// Add to block to enable
// e.g. 'block-color black'
// Note: both arguments must be predefined variables
// --------------------------------------------------
.block-color-mixin(@color, @color-inverted) {

.block-color.@{color} {
  background-color: @@color;
  color: @@color-inverted;

  .block,
  .component {
    &__title,
    &__body a,
    &__instruction a {
      color: @@color-inverted;
    }
  }

  .pagelevelprogress {
    &__indicator {
      border-color: @@color-inverted;
    }
    &__indicator-inner {
      background-color: @@color;
    }
    &__indicator-bar {
      background-color: @@color-inverted;
    }
  }

  .narrative {
    &__progress {
      background-color: fade(@@color-inverted, 50%);
    }

    &__progress.is-selected {
      background-color: @@color-inverted;
    }
  }
}

}

// --------------------------------------------------
// Common
// --------------------------------------------------

// Background color mixin
// Can be added to course, contentObject, article, block, or component to enable
// e.g. 'bg-color black'
// Note: both arguments must be predefined variables
// --------------------------------------------------
.bg-color-mixin(black, white);
.bg-color-mixin(background, background-inverted);
.bg-color-mixin(transparent-light, black);
.bg-color-mixin(transparent-dark, white);

.bg-color-mixin(@color, @color-inverted) {

.bg-color.@{color} {
  background-color: @@color;
  color: @@color-inverted;

  .block,
  .component {
    &__title,
    &__body a,
    &__instruction a {
      color: @@color-inverted;
    }
  }

  .pagelevelprogress {
    &__indicator {
      border-color: @@color-inverted;
    }
    &__indicator-inner {
      background-color: @@color;
    }
    &__indicator-bar {
      background-color: @@color-inverted;
    }
  }

  .narrative {
    &__progress {
      background-color: fade(@@color-inverted, 50%);
    }

    &__progress.is-selected {
      background-color: @@color-inverted;
    }
  }
}

}

// Fade background mixin
// Can be applied to any level but some levels may work better than others
// Supports values from 10 to 90
// e.g. 'fade-bg black-50'
// Can be extended to include more colours
// Note: colour arguments must be predefined variables
// --------------------------------------------------
.fade-bg {
  z-index: 0;

  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    z-index: -1;
  }
}

.fade(@name; @color; @steps; @index: 1) when (@index =< @steps) {

  @percentage: @index * 10;

  .@{name}.@{color}-@{percentage}:before {
    background-color: fade(@@color, @percentage);
  }

  .fade(@name; @color; @steps; (@index + 1));
}

.fade(fade-bg; black; 9);
.fade(fade-bg; white; 9);

// Linear gradient mixin
// Can be applied to any level but some levels may work better than others
// e.g. 'linear-gradient-bg to-left from-white from-0 to-black to-100'
// Can be extended to include more colours and different stops
// Note: colour arguments must be predefined variables
// --------------------------------------------------
.linear-gradient-bg:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
}

.linear-gradient-bg(top; white; black);
.linear-gradient-bg(top; black; white);

.linear-gradient-bg(top; transparent-light; black);
.linear-gradient-bg(bottom; transparent-light; black);
.linear-gradient-bg(left; transparent-light; black);
.linear-gradient-bg(right; transparent-light; black);

.linear-gradient-bg(top; transparent-dark; white);
.linear-gradient-bg(bottom; transparent-dark; white);
.linear-gradient-bg(left; transparent-dark; white);
.linear-gradient-bg(right; transparent-dark; white);

.linear-gradient-bg(top; transparent-light; black; 0; 50);
.linear-gradient-bg(bottom; transparent-light; black; 0; 50);
.linear-gradient-bg(left; transparent-light; black; 0; 50);
.linear-gradient-bg(right; transparent-light; black; 0; 50);

.linear-gradient-bg(top; black; transparent-light; 0; 50);
.linear-gradient-bg(bottom; black; transparent-light; 0; 50);
.linear-gradient-bg(left; black; transparent-light; 0; 50);
.linear-gradient-bg(right; black; transparent-light; 0; 50);

.linear-gradient-bg(top; transparent-dark; white; 0; 50);
.linear-gradient-bg(bottom; transparent-dark; white; 0; 50);
.linear-gradient-bg(left; transparent-dark; white; 0; 50);
.linear-gradient-bg(right; transparent-dark; white; 0; 50);

.linear-gradient-bg(top; white; transparent-dark; 0; 50);
.linear-gradient-bg(bottom; white; transparent-dark; 0; 50);
.linear-gradient-bg(left; white; transparent-dark; 0; 50);
.linear-gradient-bg(right; white; transparent-dark; 0; 50);

.linear-gradient-bg(@direction; @color-from; @color-to; @color-from-stop: 0; @color-to-stop: 100;) {

  .linear-gradient-bg.to-@{direction}.from-@{color-from}.from-@{color-from-stop}.to-@{color-to}.to-@{color-to-stop}:before {
    background-image: linear-gradient(to @direction, @@color-from unit(@color-from-stop,~'%'), @@color-to unit(@color-to-stop,~'%'));
  }
}
